// <auto-generated />
using System;
using FlowcentricAssessment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlowcentricAssessment.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20240211072552_addFK")]
    partial class addFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlowcentricAssessment.Models.ClientSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("DisplayFullError")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature1")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature1AdvancedSearch")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature2")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature3")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature3AdvancedSearch")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature4")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableFeature5")
                        .HasColumnType("bit");

                    b.Property<int>("Feature3ItemCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductSettingsLinkIDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowHeader")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowMenuBar")
                        .HasColumnType("bit");

                    b.Property<int>("SubMenusToShow")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductSettingsLinkIDId");

                    b.ToTable("ClientSettings");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.CustomSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientSettingsLinkIDId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CustomSettingsType")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentLinkIDId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientSettingsLinkIDId");

                    b.HasIndex("ParentLinkIDId");

                    b.ToTable("CustomSettings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CustomSettings");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.ProductSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("License")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LoginAttemptLimit")
                        .HasColumnType("int");

                    b.Property<int>("PasswordHistory")
                        .HasColumnType("int");

                    b.Property<string>("ServerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductSettings");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.CustomSettingsBool", b =>
                {
                    b.HasBaseType("FlowcentricAssessment.Models.CustomSettings");

                    b.Property<string>("boolValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CustomSettingsBool");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.CustomSettingsInt", b =>
                {
                    b.HasBaseType("FlowcentricAssessment.Models.CustomSettings");

                    b.Property<int?>("intValue")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("CustomSettingsInt");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.CustomSettingsString", b =>
                {
                    b.HasBaseType("FlowcentricAssessment.Models.CustomSettings");

                    b.Property<string>("stringValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("CustomSettingsString");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.ClientSettings", b =>
                {
                    b.HasOne("FlowcentricAssessment.Models.ProductSettings", "ProductSettingsLinkID")
                        .WithMany()
                        .HasForeignKey("ProductSettingsLinkIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSettingsLinkID");
                });

            modelBuilder.Entity("FlowcentricAssessment.Models.CustomSettings", b =>
                {
                    b.HasOne("FlowcentricAssessment.Models.ClientSettings", "ClientSettingsLinkID")
                        .WithMany()
                        .HasForeignKey("ClientSettingsLinkIDId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlowcentricAssessment.Models.CustomSettings", "ParentLinkID")
                        .WithMany()
                        .HasForeignKey("ParentLinkIDId");

                    b.Navigation("ClientSettingsLinkID");

                    b.Navigation("ParentLinkID");
                });
#pragma warning restore 612, 618
        }
    }
}
